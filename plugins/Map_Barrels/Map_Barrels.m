function ISI_MapBarrels(varargin)
% Generate all-barrel map from existing .mat files generated by ISI_analysis
% Notes:
%   Before running this function, the IOS_analysisGUI must already be running
%   and loaded with relevant parameters. At the very minimum, the Directory
%   and Vessel File fields in the GUI must not be empty.
% 


% Fixed variables
nThresh = 0.00005;

% Get path from GUI
sPath = get(findobj(findobj('tag', 'ISIanalysisGUI_fig'), 'tag', 'path'), 'string');

% Get vessel image path and filename from GUI
sVesselImage = fullfile(sPath, get(findobj(findobj('tag', 'ISIanalysisGUI_fig'), 'tag', 'vessel_filename'), 'string'));

% Get sigma factor for smoothing of maps from GUI
nSigma = str2double(get(findobj(findobj('tag', 'ISIanalysisGUI_fig'), 'tag', 'smooth_sigma'), 'string'));

% Load the file exclusion list
% This file is be default called ExcludeFiles.m and contains a cell
% called cExclude (as Matlab code). The cell contains filenames that will NOT be included in
% the all-barrel map. Example;
%    cExclude = {    'C1_173543', ...
%                    'C1_174151', ...
%                    'C4_175521' };
sExcludeFile = fullfile(sPath, 'ExcludeFiles.m');
if exist(sExcludeFile, 'file')
    sPwd = pwd;
    cd(sPath)
    ExcludeFiles
    cd(sPwd)
    % If cExclude variable was not loaded, create an empty cell to prevent
    % errors further down
    if ~exist('cExclude', 'var')
        cExclude = {};
    end
else
    cExclude = {};
end

% Check if IOSPeaks.mat file exists (i.e. has already been generated). If
% to, skip loading of .mat files and go straight to the graphics generation
% part
if exist(fullfile(sPath, 'IOSPeaks.mat'), 'file')
    disp(sprintf('** GetIOSPeaksWrapper says:\n** IOSPeaks.mat will be loaded from disk.\n** To generate a new IOSPeaks.mat file, delete the file:\n** %s', fullfile(sPath, 'IOSPeaks.mat')));
    load(fullfile(sPath, 'IOSPeaks.mat'))
    sList = tIOSPeaks(1).sList;
    cMaskMapT = tIOSPeaks(1).cMaskMapT;
    cMaskMap = tIOSPeaks(1).cMaskMap;
    
else
    % If IOSPeaks.mat does not exist, we will generate it by iterating
    % across all .mat files and interactively draw a boundary/ROI around
    % each putative barrel manually
    
    % Get list of all .mat files (mapped whiskers)
    sPwd = pwd;
    cd(sPath)
    sList = dir('*.mat');

    % get all masked maps (interactively since we need to draw the ROI for each file)
    cMaskMapT = cell({});
    cMaskMap = cell({});
    cMap = cell({});
    bHaveData = false;
    for i = 1:length(sList)
        [mMaskMapT, mMaskMap, mMap] = GetIOSPeak(sList(i).name, nThresh);
        if isempty(mMaskMapT)
            continue
        end
        cMaskMapT{i} = mMaskMapT;
        cMaskMap{i} = mMaskMap;
        cMap{i} = mMap;
        bHaveData = true;
    end

    if ~bHaveData
        error('No data found in current IOS folder')
    end
    
    % generate structure to hold data
    tIOSPeaks = struct([]);
    tIOSPeaks(1).cMaskMap = cMaskMap;
    tIOSPeaks(1).cMaskMapT = cMaskMapT;
    tIOSPeaks(1).cMap = cMap;
    tIOSPeaks(1).sList = sList;

    % Save IOSPeaks.mat file
    save IOSPeaks.mat tIOSPeaks
    
    cd(sPwd)
end

% Generate the max projection all-barrels map
mMaskMapAll = zeros(size(cMaskMapT{1}));
mIdentityMap = zeros(size(cMaskMapT{1}));
vY = []; vX = []; cTxt = cell({});
for i = 1:length(cMaskMapT)
    if any(strcmp(sList(i).name(1:end-4), cExclude))
        continue
    end
    mMap = cMaskMapT{i};
    %mMap = cMap{i};
    mMap(isnan(mMap)) = 0;
    
    % smooth map
    if isnumeric(nSigma) && ~isempty(nSigma) && ~isnan(nSigma)
        mWin = fspecial('gaussian', nSigma*3, nSigma);
        mMap = single(filter2(mWin, mMap, 'same'));
    end

    % normalize
    vUniq = sort(unique(mMap(:)));
    mMap = mMap - vUniq(2);
    mMap = mMap ./ max(max(mMap));
    if all(isnan(mMap(:))), continue, end
    
    % Drop values below 10th percentile (to get rid of outliers)
    mMap(mMap(:) < .3) = 0;

    mMaskMapAll = max(mMap, mMaskMapAll);
    [nMax, nMaxInd] = max(mMap(:));

    % Find indices in mMaskMapAll that were used from current map
    % Values that are ambiguous are assigned NaNs
    mIdentityMap(mMaskMapAll == mMap) = i;
    
    % info for adding text labels later
    [nX, nY] = ind2sub(size(mMap), nMaxInd);
    vX(end+1) = nX;
    vY(end+1) = nY;
    cTxt{end+1} = sList(i).name(1:2);

end

mMaskMapAll(mMaskMapAll(:) == 0) = -.5;
mMaskMapAll(mMaskMapAll(:) == NaN) = -.5;

% Display all-barrel map (filtered)
figure
imagesc(mMaskMapAll .* -1)
colormap gray
axis image
title(sprintf('Barrel Map - %s', sPath))
vCLim = [-1 -.5];
set(gca,'clim', vCLim)
xlabel('px'); ylabel('px')

% Text labels
for i = 1:length(vX)
    hTxt = text(vY(i), vX(i), cTxt{i});
    set(hTxt, 'color', 'w', 'horizontalAlignment','center', 'verticalAlignment', 'middle');
end

%hold on
%[c,h] = contour(mMaskMapAll, .76);

% Generate mask for mIdentityMap
mMask = ones(size(mIdentityMap));
mMask( (mMaskMapAll .* -1) < vCLim(1) | (mMaskMapAll .* -1) > vCLim(2) ) = 0;

% Display identity map
mIdentityMap = mIdentityMap .* mMask;
figure
imagesc(mIdentityMap)
colormap jet
axis image
title(sprintf('Barrel Map - %s', sPath))
xlabel('px'); ylabel('px')

% Compute centroid of each whisker representation and plot on top of
% identify map
hold on
mCentroids = [];
for i = 1:length(cMaskMapT)
    vIndx = find(mIdentityMap(:) == i);
    [vI, vJ] = ind2sub(size(mIdentityMap), vIndx);
    mCentroids(i, :) = [median(vI) nanmedian(vJ)];
end
scatter(mCentroids(:, 2), mCentroids(:, 1), 'k+')

% Plot barrel map on vessel image
figure
mBlue = imread(sVesselImage);
mBlue = double(mBlue(:,:,1));
mBlue = mBlue - min(mBlue(:));
mBlue = uint8 ( (mBlue ./ max(mBlue(:))) .* 255 );
mBlue = repmat(mBlue, [1 1 3]);

h1 = imshow(mBlue); % uint8 [H W 3]    0 - 255
hold on

mNorm = double(mMaskMapAll) .* -1;

mNorm(mNorm(:) < vCLim(1)) = vCLim(1);
mNorm(mNorm(:) > vCLim(2)) = vCLim(2);

mNorm = mNorm - min(mNorm(:));
mNorm = mNorm ./ max(mNorm(:));

h2 = imshow(mNorm); % double [H W]                  0.0001 - 1
alphamap = zeros(size(mNorm));
alphamap(mNorm < .8) = .3;
set(h2, 'alphadata', alphamap, 'alphaDataMapping','none');
title(sprintf('Barrel Map - %s', sPath))
colormap jet

% Plot identity map and centroids on vessel images
figure
mBlue = imread(sVesselImage);
mBlue = double(mBlue(:,:,1));
mBlue = mBlue - min(mBlue(:));
mBlue = uint8 ( (mBlue ./ max(mBlue(:))) .* 255 );
mBlue = repmat(mBlue, [1 1 3]);

h1 = imshow(mBlue); % uint8 [H W 3]    0 - 255
hold on

mNorm = mIdentityMap;
mNorm = mNorm - min(mNorm(:));
mNorm = mNorm ./ max(mNorm(:));

h2 = imshow(mNorm); % double [H W]                  0.0001 - 1
alphamap = zeros(size(mNorm));
alphamap(mNorm > 0) = .4;
set(h2, 'alphadata', alphamap, 'alphaDataMapping','none');
scatter(mCentroids(:, 2), mCentroids(:, 1), 'k+')
title(sprintf('Barrel Map - %s', sPath))
colormap hsv

% Plot contour of identify map on vessel image



