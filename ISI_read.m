function [ISIdata] = ISI_read(prmts)
% ISI_READ  Load ISI data
% Load trials from binary file generated by LabView IOS application.
%
% Notes on use:
%  If function reports an Out of Memory error, try enabling pixel binning
%  to reduce memory usage when the function runs.
%

% Changelog:
%  03/01/11 Modified from Pablo's code, engineered to match the output of
%           ISI_recordframes_piezo.vi. All data formats should be in
%           little-endian. Linux may not read 8 byte spacers correctly.
%           Also converts int16 data to single, instead of double. MP
%  02/02/12 Modified to allow pixel binning during file read. PMK
%  02/10/12 Fixed reading files on Linux. PMK
%  03/26/12 Fixed reading files with non-integer trial durations. PMK
%  11/04/15 Enable reading data converted to .mat from OpticalImaging setup (Grinvald). PB

% Open file
ISIdata = [];
path2file = fullfile(prmts.path2dir,prmts.name);

switch prmts.fileType
    case 'dat'
        
        fid = fopen(path2file);
        if fid==-1
            error(['Failed to open ' path2file]);
            return;
        end
        
        % Get file size
        fseek(fid, 0, 'eof');
        nFileSize = ftell(fid);
        
        % Return file position indicator to start of file
        fseek(fid, 0, 'bof');
        
        % Get file headers
        thestarttime = fread(fid,4,'int32');
        size_x = fread(fid, 1, 'int16');
        size_y = fread(fid, 1, 'int16');
        frame_rate = fread(fid,1,'int16');
        bin_duration = fread(fid,1,'int16');
        
        % Read trial duration
        nsec = fread(fid,1,'uint16');
        bit_depth1 = fread(fid,1,'int16');
        fpos = ftell(fid);
        ntrials = fread(fid,1,'int32');
        %nFramesPerTrial = nsec*(frame_rate/bin_duration);
        bin_duration_sec = bin_duration / frame_rate;
        if ~isempty(prmts.Trials2Use)
            trial_range = sprintf('[%d %d]', prmts.Trials2Use(1), prmts.Trials2Use(end));
        else
            trial_range = sprintf('[0 %d]', ntrials);
        end
        
        % Estimate frames/trial from file filesize and known header sizes
        nFrameSize = size_x * size_y * 2; % bytes
        nHeaderSize = 20 + (ntrials * 47); % each trial has headers of 47 bytes
        nFramesPerTrial = int32((nFileSize-nHeaderSize) / nFrameSize / ntrials);
        
        % Print file into to prompt
        fprintf('\nFilename:\t\t%s\nTrials:\t\t\t%d\nFrame Rate:\t\t%d frames/s\nBin Duration:\t%d frames / %.2f s\nFrame Size:\t\t%dx%d px\nFrames/trial:\t%d\nBit Depth:\t\t%d\nTrial Duration:\t%d s\nTrials Used:\t%s\n',...
            prmts.name, ntrials, frame_rate, bin_duration, bin_duration_sec, size_x,size_y,nFramesPerTrial,bit_depth1,nsec,trial_range);
        
        % Check that frames/trial estimate is consistent with header information
        % Note: These numbers WILL deviate if the trial duration is non-integer.
        %       In these cases, we will issue a warning to prompt.
        if nFramesPerTrial ~= [nsec*(frame_rate/bin_duration)]
            disp(sprintf('Warning: Frames/trial estimated from filesize (%.0f) is different from that retrieved from file headers (%d)', nFramesPerTrial, nsec*(frame_rate/bin_duration)))
        end
        
        if ~prmts.DoLoad
            return
        end
        
        fseek(fid, 25-4, 0);
        
        hWait = waitbar(0,'Loading frames...');
        
        h2fig = findobj('Tag', 'ISIanalysisGUI_fig');%ensure function can stil be run w/o GUI
        if ~isempty(h2fig);centerfig(hWait, h2fig);end
        drawnow;
        
        ISIdata.frameStack = cell(ntrials,(nsec*(frame_rate/bin_duration)));
        size(ISIdata.frameStack);
        for k = 1:ntrials
            % Read trial header
            intcheck = fread(fid,1,'int32');        % should be -9999
            if intcheck ~= -9999
                warning('intcheck does not return -9999 in ISI_read.m. Entering debugging mode.')
                keyboard
            end
            trial = fread(fid,1,'uint32');          % trial #, starting with 0
            stimnum = fread(fid,1,'int32');
            if isunix
                trial_times = fread(fid,24,'signed char');   % On Windows, specifying 'char' works, but not on Linux
            else
                trial_times = fread(fid,24,'char');   % On Windows, specifying 'char' works
            end
            fseek(fid, 25, 0);
            fseek(fid, -8, 0); % back up by 4 int16 because not writing array size, like earlier version.
            
            %for m = 1:((1/bin_duration_sec)*nsec)
            for m = 1:nFramesPerTrial
                mFrame = single([]);
                mFrame = single(fread(fid, [size_x size_y], prmts.precision));
                
                % Bin pixels
                if isfield(prmts, 'imgBin')
                    if prod(prmts.imgBin) > 1
                        mFrame = downsamp2d(mFrame, prmts.imgBin);
                    end
                end
                
                % Assign
                ISIdata.frameStack{k,m} = single([]);
                ISIdata.frameStack{k,m} = mFrame;
            end
            if ishandle(hWait)
                waitbar(k/ntrials, hWait)
            else
                error('File read aborted.');
            end
        end
        
        % Check that we have read the correct number of frames by verifying that
        % we are at the end-of-file.
        if nFileSize ~= ftell(fid)
            disp('Warning: Not all file data was read!')
        end
        
        close(hWait)
        fclose(fid);
        
    case 'mat'
        %need to parse here mat data structure to ISIdata.
        %LongDaq (and hopefully any other data type from Optical Imaging system) comes in the following format:
        %Each "block" is saved to a separated file the structure of the file name is as follows:
        % basename_EyyyBxxx.BLK.mat where yyy is the Experiment id and xxx is the Block id.
        % each block contains the following data:
        %   ConditionCount
        %   FrameCount
        %   FrameHeight
        %   FrameWidth
        %   iF ???
        %   ScaleFactor ???
        %   TrialCount
        %   VidsPerDataFrame
        %
        % There are two ways data can be stored
        % "FrameArray" each frame is stored in a separated variable named (if converted into the FrameArray):
        %   cXfyy where X is the condition id and yy is the frame count.
        %
        % "ConditionArray" where all frame of each condition are stored in a three dimensional array named:
        %   cX where X is the condition. Here frame are concatenated across the third dimension (height,width,frame)
        %
        % Note - a "condition" refers to the set of frames with a specific stimulus was used. There's no way to recover
        % where along the conditions the stimulus was presented so we have to ask this information from the user
        
        
        %gather some info about file and attemp to determine type
        eval(sprintf('load %s FrameWidth FrameHeight FrameCount ConditionCount ScaleFactor VidsPerDataFrame TrialCount',path2file))
        
        %ISIdata.frameStack{k,m} ; k trials, m frames/trial let's figure out this values
        % in LabView, we refer to trials in Optical Imaging this are the  "blocks" (separated files)
        %
        
        size_y = FrameHeight;
        size_x = FrameWidth;
        
        nFramesPerTrial = FrameCount;
        
        %populate nsec: compute the lenght of each block of data
        totalNumberOfCameraFrames = FrameCount * VidsPerDataFrame;
        nsec = totalNumberOfCameraFrames/prmts.camera_fps;
        frame_rate = prmts.camera_fps;
        bin_duration = VidsPerDataFrame ;
        ntrials = numel(prmts.Trials2Use);
        %dynamically build file name
        E_number = regexp(path2file,'E(?<ex_id>\d+)B\d+.','tokens');%extract experiment number - this is part of the Optical Imagign naming system
        E_number = cell2mat(E_number{1});
        blkFileList=cell(ntrials,1);
        for iBLOCK = 1 : ntrials
            blkFileList{iBLOCK} = regexprep(path2file,'E\d+Bd+',sprintf('E%sB%d',E_number,prmts.Trials2Use(iBLOCK)));
        end%creating list of block file names to load
        
        %determine if data is of type "FrameArray" or "ConditionArray"
        %assume FrameArray, if failed then load as ConditionArray
        
        eval(sprintf('load %s c0f0',path2file))
        if exist('c0f0','var')
            %bingo this is a FrameArray
            for k = 1:ntrials
                for m = 0 : FrameCount-1 % frames start with 0
                    eval(sprintf('load %s c0f%d;',blkFileList{k},m))
                    eval(sprintf('ISIdata.frameStack{k,m+1} = c0f%d'';',m)); %looks like data needs to be transposed with respect to reference image.
                    eval(sprintf('clear c0f%d;',m));
                end
            end
        else
            
        end
        
    otherwise
end%loading dat/mat files

% Store parameters relevant for further analysis
ISIdata.ntrials = ntrials;
ISIdata.nsec = nsec;
ISIdata.frame_rate = frame_rate;
ISIdata.bin_duration = bin_duration; % apparently in frames
ISIdata.nFramesPerTrial = nFramesPerTrial;

% Frame size
ISIdata.frameSizeYX = [size_y size_x];
if isfield(prmts, 'imgBin')
    if prod(prmts.imgBin) > 1
        ISIdata.frameSizeYX = ISIdata.frameSizeYX ./ prmts.imgBin;
    end
end

ISIdata.nPreStimFrames = (frame_rate./bin_duration) * prmts.preStimDurSec;
ISIdata.nStimFrames = (frame_rate./bin_duration) * prmts.stimDurSec;
ISIdata.nPostStimFrames = nFramesPerTrial - (ISIdata.nPreStimFrames + ISIdata.nStimFrames);

fprintf('\nLoaded %d trials/blocks with %d frames each',k,nFramesPerTrial)
return
